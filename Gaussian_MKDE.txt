##################
#Packages
##################
library(truncdist)
library(ks)

#######################
#Simulating Test Data
#######################
set.seed(21)
y_h<-rnorm(n = 50,
           mean = 0.00,
           sd = 1.00)
y_c<-rnorm(n = 50,
           mean = 2.00,
           sd = 1.00)

###################################################
###################################################
#HISTORICAL DATA ANALYSIS:
#Requires:  y_h:  Vector of historical outcome data
###################################################
###################################################
n_h<-length(y_h)

#######################################################################
#Gibbs Sampling for Historical Data
#######################################################################
mcmc_samples<-110000

#Parameter Vectors
mu_h_ppd<-rep(NA,
              times = mcmc_samples)
sigma2_h_ppd<-rep(NA,
                  times = mcmc_samples)

#Initial Values
mu_h_ppd[1]<-mean(y_h)
sigma2_h_ppd[1]<-var(y_h)

#Main Sampling Loop
for(i in 2:mcmc_samples){
   
   #mu_h Update
   mu_h_ppd[i]<-rnorm(n = 1,
                      mean = mean(y_h),
                      sd = sqrt(sigma2_h_ppd[i-1]/n_h))

   #sigma2_h Update
   sigma2_h_ppd[i]<-1.00/rgamma(n = 1,
                                shape = (n_h/2.00),
                                rate = sum((y_h - mu_h_ppd[i])^2)/2.00)
   
   }    

burnin<-10000
thin<-100
keep_set<-seq((burnin + 1),
              mcmc_samples,
              thin)
m<-length(keep_set)      
mu_h_ppd<-mu_h_ppd[keep_set]
sigma2_h_ppd<-sigma2_h_ppd[keep_set]

###########################################
#Kernel Density Bandwidth Estimation
###########################################
H<-Hscv(cbind(mu_h_ppd, log(sigma2_h_ppd)))

################################################
################################################
#CURRENT DATA ANALYSIS:
#Requires:  y_c:  Vector of current outcome data
################################################
################################################
n_c<-length(y_c)

######################################################################################################################################
#MCMC Sampling for Current Data
######################################################################################################################################
mcmc_samples<-11000

#Parameter Vectors
mu_c_ppd<-rep(NA,
              times = mcmc_samples)
alpha_mu_ppd<-rep(NA,
                  times = mcmc_samples)
sigma2_c_ppd<-rep(NA,
                  times = mcmc_samples)
alpha_sigma2_ppd<-rep(NA,
                      times = mcmc_samples)

#Initial Values
mu_c_ppd[1]<-mean(y_c)
alpha_mu_ppd[1]<-0.0001
alpha_mu_trans<-log(alpha_mu_ppd[1]/(1.00 - alpha_mu_ppd[1]))

sigma2_c_ppd[1]<-var(y_c)
alpha_sigma2_ppd[1]<-0.0001
alpha_sigma2_trans<-log(alpha_sigma2_ppd[1]/(1.00 - alpha_sigma2_ppd[1]))

theta_c<-c(mu_c_ppd[1],
           log(sigma2_c_ppd[1]))
H_star<-diag(1.00/sqrt(c(alpha_mu_ppd[1], alpha_sigma2_ppd[1])))%*%H%*%diag(1.00/sqrt(c(alpha_mu_ppd[1], alpha_sigma2_ppd[1])))
H_star_inv<-chol2inv(chol(H_star))

z<-sample(c(1:m),
          size = 1)
theta_star_h<-c(mu_h_ppd[z],
                log(sigma2_h_ppd[z]))

probs<-rep(NA,
           times = m)
   
#Truncated Gamma Prior Distribution
#(Note: a=1, b=0 is the Uniform(0,1) distribution)
a<-1.00
b<-0.00

#Metropolis Settings
acctot_alpha_mu<-1
metrop_sd_alpha_mu<-1.95
acctot_alpha_sigma2<-1
metrop_sd_alpha_sigma2<-3.75
acctot_sigma2<-1
metrop_sd_sigma2<-0.45

#Main Sampling Loop
for(i in 2:mcmc_samples){

   #z
   log_vals<-rep(NA,
                 times = m)
   for(j in 1:m){
      log_vals[j]<- -0.50*crossprod((theta_c - c(mu_h_ppd[j], log(sigma2_h_ppd[j]))), 
                                    (H_star_inv%*%(theta_c - c(mu_h_ppd[j], log(sigma2_h_ppd[j])))))
      }

   for(j in 1:m){
      probs[j]<-1.00/sum(exp(log_vals - log_vals[j]))
      }
   z<-sample(c(1:m),
             prob = probs,
             size = 1)
   theta_star_h<-c(mu_h_ppd[z],
                   log(sigma2_h_ppd[z]))

   #alpha_mu
   alpha_mu_trans_old<-alpha_mu_trans
   H_star_old<-H_star
   H_star_inv_old<-H_star_inv
   second<- -0.50*determinant(H_star_old, 
                              logarithm = TRUE)$modulus +
            -0.50*crossprod((theta_c - theta_star_h), 
                            (H_star_inv_old%*%(theta_c - theta_star_h))) +
            -(a + 1.00)*log(1.00 + exp(-alpha_mu_trans_old)) +
            -b/(1.00 + exp(-alpha_mu_trans_old)) +
            -alpha_mu_trans_old

   alpha_mu_trans<-rnorm(n = 1,
                         mean = alpha_mu_trans_old,
                         sd = metrop_sd_alpha_mu)
   alpha_mu_ppd[i]<-1.00/(1.00 + exp(-alpha_mu_trans))
   H_star<-diag(1.00/sqrt(c(alpha_mu_ppd[i], alpha_sigma2_ppd[i-1])))%*%H%*%diag(1.00/sqrt(c(alpha_mu_ppd[i], alpha_sigma2_ppd[i-1])))
   H_star_inv<-chol2inv(chol(H_star))
      
   first<- -0.50*determinant(H_star, 
                             logarithm = TRUE)$modulus +
           -0.50*crossprod((theta_c - theta_star_h), 
                           (H_star_inv%*%(theta_c - theta_star_h))) +
           -(a + 1.00)*log(1.00 + exp(-alpha_mu_trans)) +
           -b/(1.00 + exp(-alpha_mu_trans)) +
           -alpha_mu_trans

   acc<-1
   ratio<-exp(first -
              second)
   if(ratio < runif(n = 1, 
                    min = 0.00, 
                    max = 1.00)){
  
     alpha_mu_ppd[i]<-alpha_mu_ppd[i-1]
     alpha_mu_trans<-alpha_mu_trans_old
     H_star<-H_star_old
     H_star_inv<-H_star_inv_old
      
     acc<-0

     }

   acctot_alpha_mu<-acctot_alpha_mu + 
                    acc

   #alpha_sigma2
   alpha_sigma2_trans_old<-alpha_sigma2_trans
   H_star_old<-H_star
   H_star_inv_old<-H_star_inv
   second<- -0.50*determinant(H_star_old, 
                              logarithm = TRUE)$modulus +
            -0.50*crossprod((theta_c - theta_star_h), 
                            (H_star_inv_old%*%(theta_c - theta_star_h))) +
            -(a + 1.00)*log(1.00 + exp(-alpha_sigma2_trans_old)) +
            -b/(1.00 + exp(-alpha_sigma2_trans_old)) +
            -alpha_sigma2_trans_old

   alpha_sigma2_trans<-rnorm(n = 1,
                             mean = alpha_sigma2_trans_old,
                             sd = metrop_sd_alpha_sigma2)
   alpha_sigma2_ppd[i]<-1.00/(1.00 + exp(-alpha_sigma2_trans))
   H_star<-diag(1.00/sqrt(c(alpha_mu_ppd[i], alpha_sigma2_ppd[i])))%*%H%*%diag(1.00/sqrt(c(alpha_mu_ppd[i], alpha_sigma2_ppd[i])))
   H_star_inv<-chol2inv(chol(H_star))
      
   first<- -0.50*determinant(H_star, 
                             logarithm = TRUE)$modulus +
           -0.50*crossprod((theta_c - theta_star_h), 
                           (H_star_inv%*%(theta_c - theta_star_h))) +
           -(a + 1.00)*log(1.00 + exp(-alpha_sigma2_trans)) +
           -b/(1.00 + exp(-alpha_sigma2_trans)) +
           -alpha_sigma2_trans

   acc<-1
   ratio<-exp(first -
              second)
   if(ratio < runif(n = 1, 
                    min = 0.00, 
                    max = 1.00)){
  
     alpha_sigma2_ppd[i]<-alpha_sigma2_ppd[i-1]
     alpha_sigma2_trans<-alpha_sigma2_trans_old
     H_star<-H_star_old
     H_star_inv<-H_star_inv_old
      
     acc<-0

     }

   acctot_alpha_sigma2<-acctot_alpha_sigma2 + 
                        acc

   #mu_c 
   cond_mean<-mu_h_ppd[z] + 
              (H[1,2]/H[2,2])*sqrt(alpha_sigma2_ppd[i]/alpha_mu_ppd[i])*(log(sigma2_c_ppd[i-1]/sigma2_h_ppd[z]))
   cond_var<-H[1,1]/alpha_mu_ppd[i] +
             -(H[1,2]*H[2,1])/(H[2,2]*alpha_mu_ppd[i])  
   var_mu<-(sigma2_c_ppd[i-1]*cond_var)/(n_c*cond_var + sigma2_c_ppd[i-1])
   mean_mu<-(sum(y_c)*cond_var + cond_mean*sigma2_c_ppd[i-1])/(n_c*cond_var + sigma2_c_ppd[i-1])
   mu_c_ppd[i]<-rnorm(n = 1,
                      mean = mean_mu,
                      sd = sqrt(var_mu))
   theta_c[1]<-mu_c_ppd[i]
   
   #sigma2_c
   second<- -0.50*n_c*log(sigma2_c_ppd[i-1]) +
            -sum((y_c - mu_c_ppd[i])^2)/(2.00*sigma2_c_ppd[i-1]) +
            -0.50*crossprod((theta_c - theta_star_h), 
                            (H_star_inv%*%(theta_c - theta_star_h)))

   sigma2_c_ppd[i]<-exp(rnorm(n = 1,
                              mean = log(sigma2_c_ppd[i-1]),
                              sd = metrop_sd_sigma2))
   theta_c[2]<-log(sigma2_c_ppd[i])

   first<- -0.50*n_c*log(sigma2_c_ppd[i]) +
           -sum((y_c - mu_c_ppd[i])^2)/(2.00*sigma2_c_ppd[i]) +
           -0.50*crossprod((theta_c - theta_star_h), 
                           (H_star_inv%*%(theta_c - theta_star_h)))

   acc<-1
   ratio<-exp(first -
              second)
   if(ratio < runif(n = 1, 
                    min = 0.00, 
                    max = 1.00)){
  
     sigma2_c_ppd[i]<-sigma2_c_ppd[i-1]
     acc<-0

     }

   acctot_sigma2<-acctot_sigma2 + 
                  acc
   
   theta_c[2]<-log(sigma2_c_ppd[i])

   #Printing to the Screen
   print(round(100*acctot_alpha_mu/i, 2)) 
   print(round(100*acctot_alpha_sigma2/i, 2))
   print(round(100*acctot_sigma2/i, 2)) 
   print(round(100*(i/mcmc_samples), 2))

   }

burnin<-1000
thin<-10
keep_set<-seq((burnin + 1),
              mcmc_samples,
              thin)
mu_c_ppd<-mu_c_ppd[keep_set]
alpha_mu_ppd<-alpha_mu_ppd[keep_set]
sigma2_c_ppd<-sigma2_c_ppd[keep_set]
alpha_sigma2_ppd<-alpha_sigma2_ppd[keep_set]

##############################################
##############################################
#FINAL INFERENCE
##############################################
##############################################
mu_c_post_mean<-mean(mu_c_ppd)
mu_c_cri<-quantile(mu_c_ppd,
                   c(0.025, 0.975))

alpha_mu_post_mean<-mean(alpha_mu_ppd)
alpha_mu_cri<-quantile(alpha_mu_ppd,
                       c(0.025, 0.975))

sigma2_c_post_mean<-mean(sigma2_c_ppd)
sigma2_c_cri<-quantile(sigma2_c_ppd,
                       c(0.025, 0.975))

alpha_sigma2_post_mean<-mean(alpha_sigma2_ppd)
alpha_sigma2_cri<-quantile(alpha_sigma2_ppd,
                           c(0.025, 0.975))

   
